---
 - name: "Install and Configure OpenStack Compute Service (Nova)"   
   hosts: openstack
   remote_user: root
   gather_facts: yes
   
   tasks: 
     - name: "add nova user (set in service project)"
       shell: source ~/keystonerc && openstack user create --domain default --project service --password servicepassword nova 
       args:
         executable: /bin/bash
       register: nova_user
     - debug: var=nova_user.stdout_lines

     - name: "add nova user in admin role"
       shell: source ~/keystonerc && openstack role add --project service --user nova admin
       args:
         executable: /bin/bash

     - name: "add placement user (set in service project)"
       shell: source ~/keystonerc && openstack user create --domain default --project service --password servicepassword placement  
       args:
         executable: /bin/bash
       register: placement_user
     - debug: var=placement_user.stdout_lines

     - name: "add placement user in admin role"
       shell: source ~/keystonerc && openstack role add --project service --user placement admin
       args:
         executable: /bin/bash


     - name: "add service entry for nova"
       shell: source ~/keystonerc && ""openstack service create --name nova --description "OpenStack Compute service" compute"" 
       args:
         executable: /bin/bash
       register: add_service
     - debug: var=add_service.stdout_lines

     - name: "add service entry for placement"
       shell: source ~/keystonerc && ""openstack service create --name placement --description "OpenStack Compute Placement service" placement""
       args:
         executable: /bin/bash
       register: service_placement
     - debug: var=service_placement.stdout_lines


     - name: "add endpoint for nova (public,internal,admin)"
       shell: source ~/keystonerc && ""openstack endpoint create --region RegionOne compute {{ item }} http://{{ ansible_host }}:8774/v2.1/%\(tenant_id\)s""
       args: 
         executable: /bin/bash
       register: result
       with_items: 
         - public
         - internal
         - admin
     - debug: var=result
#       tags: nova

     - name: "create Nova database"
       mysql_db: name={{ item }} state=present
       with_items: 
         - nova
         - nova_api
         - nova_placement
         - nova_cell0

       tags: db

     - name: "create nova user"
       mysql_user: name=nova password=nova123 priv='nova.*:ALL,GRANT/nova_cell0.*:ALL,GRANT/nova_api.*:ALL,GRANT/nova_placement.*:ALL,GRANT' host={{ item }}
       with_items:
          - localhost
          - '%'
          - xopenstack

     - name: "Install nova"
       yum: name=openstack-nova enablerepo=centos-openstack-ocata,epel state=present

     - name: "Backup Original nova configuation"
       copy: remote_src=True src=/etc/nova/nova.conf dest=/etc/nova/nova.conf.org

     - name: "copy nova configuation"
       copy: src=nova.conf dest=/etc/nova/nova.conf mode=640 owner=root group=nova

     - name: "replace ansible_host in nova conf"
       replace: dest=/etc/nova/nova.conf regexp='192.168.122.185' replace={{ ansible_host }} backup=yes
       
     - name: "nova-placement-api configuration"
       lineinfile: dest=/etc/httpd/conf.d/00-nova-placement-api.conf 
                   line={{ item.line }}
                   insertbefore={{ item.insertbefore }}
       with_items:
         - { line: "  </Directory>", insertbefore: "</VirtualHost>" }
         - { line: "   Require all granted", insertbefore: "</Directory>" }
         - { line: "  <Directory /usr/bin>", insertbefore: "Require all granted" }

     - name: "Nova DB-Sync"
       shell: "{{ item }}"
       with_items: 
         - nova-manage api_db sync
         - nova-manage cell_v2 map_cell0 --database_connection mysql+pymysql://nova:nova123@{{ ansible_host }}/nova_cell0
         - nova-manage db sync
         - nova-manage cell_v2 create_cell --name cell1 --database_connection mysql+pymysql://nova:nova123@{{ ansible_host }}/nova --transport-url rabbit://openstack:password@{{ ansible_host }}:5672
       become: true
       become_method: su
       become_user: nova
       become_flags: '-s /bin/bash'
       tags: nova_sync

     - name: "restart httpd"
       service: name=httpd state=restarted
       tags: httpd
 
     - name: "chnage ownership to nova logs*"
       shell: chown nova. /var/log/nova/nova-placement-api.log
       args: 
         executable: /bin/bash
       tags: chown

     - name: "start and enable nova services"
       service: name={{ item }} state=started enabled=yes
       with_items: 
         - openstack-nova-api
         - openstack-nova-cert
         - openstack-nova-consoleauth
         - openstack-nova-conductor
         - openstack-nova-scheduler
         - openstack-nova-novncproxy
       tags: nova_service
     
     - name: "openstack compute status"
       shell: source ~/keystonerc && openstack compute service list
       register: status
     - debug: var=status.stdout_lines
  
#       tags: nova_compute_status 

     - name: "Install KVM Hypervisor"
       yum: name={{ item }} state=present
       with_items: 
         - qemu-kvm
         - libvirt
         - virt-install
         - bridge-utils
         - network-manager-applet.x86_64

     - name: "start and enable libvirtd"
       service: name=libvirtd state=started enabled=yes
         

     - name: "Install Openstack nova compute package"
       yum: name=openstack-nova-compute enablerepo=centos-openstack-ocata,epel state=present
       
#     - name: "nmcli configuration"
#       nmcli:
#         type: bridge
#         conn_name: br0
#         ifname: eth0
#         ip4: 192.168.122.185
#         gw4: 192.168.122.1
#         autoconnect: yes
#         state: present
#     - name: "add interface"
#       nmcli:
#         type: bridge
#         autoconnect: yes
#         conn_name: eth0
#         ifname: eth0
#         master: br0  
#         state: present      

#     - name: "remove eth0"
#       nmcli:
#         conn_name: System eth0
#         state: absent

         
     - name: "Reboot"
       command: /sbin/shutdown -r +1
       async: 0
       poll: 0
       ignore_errors: true
     - name: Waiting for shutdown
       local_action: wait_for host={{ ansible_host }} port=22 state=stopped
     - name: Waiting for restart
       local_action: wait_for host={{ ansible_host }} port=22 state=started


     - name: "nmcli configuration"
       shell: "{{ item }}"
       args:
         executable: /bin/bash
       with_items:
         - nmcli c add type bridge autoconnect yes con-name br0 ifname br0
         - nmcli c modify br0 ipv4.addresses {{ ansible_host }}/24 ipv4.method manual
         - nmcli c modify br0 ipv4.gateway 103.36.84.1
         - nmcli c modify br0 ipv4.dns 10.0.0.1 
         - nmcli c add type bridge-slave autoconnect yes con-name eth0.206 ifname eth0.206 master br0   
     
     - name: "fetch nmcli info"
       shell: nmcli c s
       args: 
         executable: /bin/bash
       register: test
     - debug: var=test


     - name: "enable VNC"
       lineinfile:
         dest: /etc/nova/nova.conf
         line: "{{ item }}"
         insertbefore: EOF
       with_items:
         - "[vnc]"
         - "enabled = True"
         - "vncserver_listen = 0.0.0.0"
         - "vncserver_proxyclient_address = {{ ansible_host }}"
         - "novncproxy_base_url = http://{{ ansible_host }}:6080/vnc_auto.html"
 
     - name: "start and enble nova compute service"
       service: name=openstack-nova-compute state=started enabled=yes
       
  
     - name: "discover compute node"
       shell: nova-manage cell_v2 discover_hosts
       become: true
       become_method: su
       become_user: nova
       become_flags: '-s /bin/bash'
     
     - name: "compute service list"
       shell: source ~/keystonerc && openstack compute service list
       register: compute
     - debug: var=compute   
    
     
